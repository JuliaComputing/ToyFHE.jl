module NTT

using GaloisFields
using Polynomials
using OffsetArrays
using Distributions
using Random
using AutoHashEquals

import Base: *, +, -

import GaloisFields: PrimeField

export LWERing, RingSampler, nntt, inntt, FixedDegreePoly,
    LWERingElement, LWERingDualElement

@auto_hash_equals struct FixedDegreePoly{N, T}
    p::OffsetVector{T}
end
function FixedDegreePoly(p::OffsetVector)
    @assert first(axes(p)[1]) == 0
    FixedDegreePoly{length(p), eltype(p)}(p)
end
Base.zero(::Type{FixedDegreePoly{N, T}}) where {N, T} =
    FixedDegreePoly(OffsetArray(zeros(T, N),0:N-1))
Polynomials.degree(p::FixedDegreePoly{N}) where {N} = N

"""
Represents the ring ùîΩq[x]/(x‚Åø+1).
"""
struct LWERing{Field <: PrimeField, N}
    # 2N'th primitive root of unity in Field
    œà::Field
end
Polynomials.degree(‚Ñõ::LWERing{F,N}) where {F,N} = N
Base.eltype(‚Ñõ::LWERing{F,N}) where {F,N} = F

"""
Represents an element of ùîΩq[x]/(x‚Åø+1).
"""
@auto_hash_equals struct LWERingElement{‚Ñõ #= ::LWERing{Field} =#, Field <: PrimeField,  N}
    p::FixedDegreePoly{N, Field}
end
LWERingElement{‚Ñõ,Field,N}(coeffs::AbstractVector) where {‚Ñõ,Field <: PrimeField,  N} = LWERingElement{‚Ñõ,Field,N}(FixedDegreePoly(coeffs))
coeffs(e::LWERingElement) = e.p.p
LWERingElement(‚Ñõ::LWERing) = LWERingElement{‚Ñõ, eltype(‚Ñõ), degree(‚Ñõ)}
Base.zero(::Type{LWERingElement{‚Ñõ,Field,N}}) where {‚Ñõ,Field,N} =
    LWERingElement{‚Ñõ,Field,N}(zero(FixedDegreePoly{N, Field}))

"""
Represents an ntt-dual element of ùîΩq[x]/(x‚Åø+1).
"""
@auto_hash_equals struct LWERingDualElement{ ‚Ñõ #= ::LWERing{Field} =#, Field <: PrimeField}
    data::OffsetVector{Field}
end
Base.zero(::Type{LWERingDualElement{‚Ñõ,Field}}) where {‚Ñõ,Field} =
    LWERingDualElement{‚Ñõ,Field}(OffsetArray(zeros(Field, degree(‚Ñõ)),0:degree(params.‚Ñõ)-1))
coeffs(e::LWERingDualElement) = e.data
LWERingDualElement(‚Ñõ::LWERing) = LWERingDualElement{‚Ñõ, eltype(‚Ñõ)}

function *(a::LWERingDualElement{‚Ñõ},
           b::LWERingDualElement{‚Ñõ}) where {‚Ñõ}
    LWERingDualElement(‚Ñõ)(a.data .* b.data)
end
function *(a::LWERingDualElement{‚Ñõ},
           b::Integer) where {‚Ñõ}
    LWERingDualElement(‚Ñõ)(a.data * b)
end
function *(a::Integer,
           b::LWERingDualElement{‚Ñõ}) where {‚Ñõ}
    LWERingDualElement(‚Ñõ)(a * b.data)
end

for f in (:+, :-)
    for T in (LWERingElement, LWERingDualElement)
        @eval function $f(a::$T{‚Ñõ},
                b::$T{‚Ñõ}) where {‚Ñõ}
            $T(‚Ñõ)(map($f, coeffs(a), coeffs(b)))
        end
        @eval $f(a::$T{‚Ñõ}) where {‚Ñõ} = $T(‚Ñõ)(map($f, coeffs(a)))
    end
end

function _ntt(‚Ñõ::LWERing, v::AbstractVector)
    @assert first(axes(v)[1]) == 0
    œâ = ‚Ñõ.œà^2
    # TODO: Do this using the DFT algorithm
    [sum((v[j]*œâ^(j*i)) for j in eachindex(v)) for i in eachindex(v)]
end

function _intt(‚Ñõ::LWERing, v::AbstractVector)
    @assert first(axes(v)[1]) == 0
    œâ = ‚Ñõ.œà^2
    # TODO: Do this using the DFT algorithm
    [sum(v[j]*inv(œâ)^(j*i) for j = eachindex(v)) for i in eachindex(v)]
end

"""
Perform a negacyclic on the coefficient vector of
p ‚àà ‚Ñõ = ùîΩq[x]/(x‚Åø+1).

Adopting the terminology from [1], we have

    nntt(p) = NTT(PowMulœà(a))

where œà = ‚àöœâ and œâ is the n-th primitive (the n
here being the same n as in the definition of ‚Ñõ).

The additional PowMulœà turns the NTT negacyclic,
i.e. introducing the extra minus sign in the wrap
around required to achieve x^n = -1.

https://eprint.iacr.org/2015/382.pdf
"""
function nntt(p::LWERingElement{‚Ñõ})::LWERingDualElement{‚Ñõ} where {‚Ñõ}
    œà = ‚Ñõ.œà
    œâ = œà^2
    cÃÉ = _ntt(‚Ñõ, [x*œà^i for (i,x) in pairs(p.p.p)])
    LWERingDualElement(‚Ñõ)(cÃÉ)
end

"""
Computes the inverse of nntt(p).
"""
function inntt(pÃÉ::LWERingDualElement{‚Ñõ})::LWERingElement{‚Ñõ} where {‚Ñõ}
    œà = ‚Ñõ.œà
    œà‚Åª¬π = inv(œà)
    pp = _intt(‚Ñõ, pÃÉ.data)
    n‚Åª¬π = inv(eltype(‚Ñõ)(length(pp)))
    LWERingElement(‚Ñõ)(FixedDegreePoly([x * n‚Åª¬π * œà‚Åª¬π^i for (i, x) in pairs(pp)]))
end

struct RingSampler{Ring} <: Random.Sampler{Ring}
    coeff_distribution::Any #DiscreteUnivariateDistribution
end

function Random.rand(rng::Random.AbstractRNG, r::RingSampler{‚Ñõ}) where {‚Ñõ}
    coeffs = OffsetArray(
        [rand(rng, r.coeff_distribution) for _ in 1:degree(‚Ñõ)],
        0:degree(‚Ñõ)-1)
    LWERingElement(‚Ñõ)(FixedDegreePoly(coeffs))
end

end
